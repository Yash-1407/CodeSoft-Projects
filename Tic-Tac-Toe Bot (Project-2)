import random

board = [' ' for _ in range(9)]

def db():
    for i in range(0, 9, 3):
        print(" | ".join(board[i:i + 3]) + "\n" + "-" * 9) if i < 6 else print(" | ".join(board[i:i + 3]))

def check_win(player):
    return any(all(board[i] == player for i in combo) for combo in [(0, 1, 2), (3, 4, 5), (6, 7, 8),(0, 3, 6),(14, 7), (2, 5, 8),(0, 4, 8), (2, 4, 6)])

def board_full():
    return ' ' not in board

def make_move(player, move):
    board[move] = player

def available_moves():
    return [i for i, space in enumerate(board) if space == ' ']

def play_game():
    db()
    human_player, ai_player = 'X', 'O'

    while True:
        try:
            player_move = int(input("Enter your move (1-9): ")) - 1
            if 0 <= player_move < 9 and board[player_move] == ' ':
                make_move(human_player, player_move)
            else:
                print("Invalid move. Please try again.")
                continue
        except ValueError:
            print("Invalid input. Enter a number between 1 and 9.")
            continue

        db()

        if check_win(human_player):
            print("You win!")
            break
        if board_full():
            print("It's a draw. Better luck next time!")
            break

        bot_move = get_best_move(ai_player, human_player)
        make_move(ai_player, bot_move)
        db()

        if check_win(ai_player):
            print("AI wins! You are weak!")
            break
        if board_full():
            print("It's a draw. Better luck next time!")
            break

def get_best_move(ai_player, human_player):
    best_score = -float('inf')
    best_move = None

    for move in available_moves():
        board[move] = ai_player
        score = minimax(board, 0, False, ai_player, human_player)
        board[move] = ' '

        if score > best_score:
            best_score = score
            best_move = move

    return best_move

def minimax(board, depth, is_maximizing, ai_player, human_player):
    if check_win(ai_player):
        return 1
    elif check_win(human_player):
        return -1
    elif board_full():
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for move in available_moves():
            board[move] = ai_player
            score = minimax(board, depth + 1, False, ai_player, human_player)
            board[move] = ' '
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for move in available_moves():
            board[move] = human_player
            score = minimax(board, depth + 1, True, ai_player, human_player)
            board[move] = ' '
            best_score = min(score, best_score)
        return best_score

if __name__ == "__main__":
    play_game()
